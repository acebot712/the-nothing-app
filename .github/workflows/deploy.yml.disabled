name: Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment to deploy to
        required: true
        options:
          - production
          - staging
        default: 'staging'

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:all

      - name: Run TypeScript check
        run: npm run tsc

      - name: Check for critical issues
        run: |
          # Add any additional pre-deployment checks
          echo "Running pre-deployment checks..."

          # Check for console.log statements
          CONSOLE_LOGS=$(grep -r "console\.log" --include="*.ts" --include="*.tsx" ./app/)
          if [ -n "$CONSOLE_LOGS" ]; then
            echo "‚ö†Ô∏è Warning: console.log statements found:"
            echo "$CONSOLE_LOGS"
            echo "Consider removing them before deploying to production."
          else
            echo "‚úÖ No console.log statements found."
          fi

  build-and-submit-ios:
    name: Build and Submit iOS
    needs: pre-deploy-checks
    runs-on: macos-latest
    # Only run on tagged releases or manual workflow dispatch for production
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build iOS App
        env:
          EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
          EXPO_PUBLIC_API_URL: ${{ secrets.EXPO_PUBLIC_API_URL }}
          EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
        run: npm run build:ios

      - name: Submit to App Store
        # Only submit to App Store on tagged releases
        if: startsWith(github.ref, 'refs/tags/')
        run: npm run submit:ios

  build-and-submit-android:
    name: Build and Submit Android
    needs: pre-deploy-checks
    runs-on: ubuntu-latest
    # Only run on tagged releases or manual workflow dispatch for production
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android App
        env:
          EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
          EXPO_PUBLIC_API_URL: ${{ secrets.EXPO_PUBLIC_API_URL }}
          EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
        run: npm run build:android

      - name: Submit to Play Store
        # Only submit to Play Store on tagged releases
        if: startsWith(github.ref, 'refs/tags/')
        run: npm run submit:android

  deploy-backend:
    name: Deploy Backend (Server)
    needs: pre-deploy-checks
    runs-on: ubuntu-latest
    # Only run on tagged releases or manual workflow dispatch
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    env:
      # Set environment based on workflow input or default to production for tags
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies for server
        run: |
          cd server
          npm ci

      - name: Run server tests
        run: |
          cd server
          # If you have tests, uncomment the line below
          # npm test
          echo "No server tests configured yet. Consider adding tests for production readiness."

      - name: Deploy to server environment
        run: |
          echo "Deploying backend to $DEPLOY_ENV environment"
          if [ "$DEPLOY_ENV" = "production" ]; then
            # Add your production deployment commands here
            echo "Would deploy to production server"
            # Example: Deploy to production hosting
            # aws lambda update-function-code --function-name my-api-production --zip-file fileb://server.zip
          else
            # Add your staging deployment commands here
            echo "Would deploy to staging server"
            # Example: Deploy to staging hosting
            # aws lambda update-function-code --function-name my-api-staging --zip-file fileb://server.zip
          fi

  create-release:
    name: Create GitHub Release
    needs: [build-and-submit-ios, build-and-submit-android, deploy-backend]
    # Only run on tagged releases
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: generate_release_notes
        run: |
          # Create a basic changelog from git commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ steps.get_version.outputs.VERSION }}^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            # If there's no previous tag, get all commits
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" ${{ steps.get_version.outputs.VERSION }})
          else
            # Get commits between tags
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..${{ steps.get_version.outputs.VERSION }})
          fi
          # Save changelog to file
          echo "$CHANGELOG" > CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Team
    needs: [build-and-submit-ios, build-and-submit-android, deploy-backend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.build-and-submit-ios.result }}" == "success" ] && [ "${{ needs.build-and-submit-android.result }}" == "success" ] && [ "${{ needs.deploy-backend.result }}" == "success" ]; then
            echo "üéâ Deployment successful! Would send success notification."
            # Add your notification command here (e.g., Slack, Discord, email)
            # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"‚úÖ Deployment successful!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "‚ùå Deployment failed! Would send failure notification."
            # Add your notification command here (e.g., Slack, Discord, email)
            # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"‚ùå Deployment failed!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
